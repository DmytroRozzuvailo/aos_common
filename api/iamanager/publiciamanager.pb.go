// Code generated by protoc-gen-go. DO NOT EDIT.
// source: publiciamanager.proto

package iamanager // import "gitpct.epam.com/epmd-aepr/aos_common/api/iamanager"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPermissionsReq struct {
	Secret               string   `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	FunctionalServerId   string   `protobuf:"bytes,2,opt,name=functional_server_id,json=functionalServerId,proto3" json:"functional_server_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPermissionsReq) Reset()         { *m = GetPermissionsReq{} }
func (m *GetPermissionsReq) String() string { return proto.CompactTextString(m) }
func (*GetPermissionsReq) ProtoMessage()    {}
func (*GetPermissionsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_publiciamanager_8324dc473d297607, []int{0}
}
func (m *GetPermissionsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPermissionsReq.Unmarshal(m, b)
}
func (m *GetPermissionsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPermissionsReq.Marshal(b, m, deterministic)
}
func (dst *GetPermissionsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPermissionsReq.Merge(dst, src)
}
func (m *GetPermissionsReq) XXX_Size() int {
	return xxx_messageInfo_GetPermissionsReq.Size(m)
}
func (m *GetPermissionsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPermissionsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPermissionsReq proto.InternalMessageInfo

func (m *GetPermissionsReq) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *GetPermissionsReq) GetFunctionalServerId() string {
	if m != nil {
		return m.FunctionalServerId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetPermissionsReq)(nil), "iamanager.GetPermissionsReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicIAManagerClient is the client API for PublicIAManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicIAManagerClient interface {
	GetPermissions(ctx context.Context, in *GetPermissionsReq, opts ...grpc.CallOption) (*Permissions, error)
}

type publicIAManagerClient struct {
	cc *grpc.ClientConn
}

func NewPublicIAManagerClient(cc *grpc.ClientConn) PublicIAManagerClient {
	return &publicIAManagerClient{cc}
}

func (c *publicIAManagerClient) GetPermissions(ctx context.Context, in *GetPermissionsReq, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/iamanager.PublicIAManager/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicIAManagerServer is the server API for PublicIAManager service.
type PublicIAManagerServer interface {
	GetPermissions(context.Context, *GetPermissionsReq) (*Permissions, error)
}

func RegisterPublicIAManagerServer(s *grpc.Server, srv PublicIAManagerServer) {
	s.RegisterService(&_PublicIAManager_serviceDesc, srv)
}

func _PublicIAManager_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicIAManagerServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iamanager.PublicIAManager/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicIAManagerServer).GetPermissions(ctx, req.(*GetPermissionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicIAManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iamanager.PublicIAManager",
	HandlerType: (*PublicIAManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermissions",
			Handler:    _PublicIAManager_GetPermissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publiciamanager.proto",
}

func init() {
	proto.RegisterFile("publiciamanager.proto", fileDescriptor_publiciamanager_8324dc473d297607)
}

var fileDescriptor_publiciamanager_8324dc473d297607 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xad, 0x87, 0x42, 0x73, 0x50, 0x0c, 0xb6, 0x94, 0xe2, 0x41, 0x7a, 0xf2, 0x62, 0x22,
	0xd5, 0x3f, 0xa0, 0x17, 0xed, 0x41, 0x28, 0xeb, 0x4d, 0x91, 0x65, 0x36, 0x3b, 0x2e, 0x03, 0x9b,
	0x4c, 0x4c, 0xb2, 0xfe, 0x7e, 0x21, 0x2b, 0xbb, 0x2b, 0xbd, 0xcd, 0xcc, 0xf7, 0x98, 0xf7, 0x9e,
	0x58, 0xfa, 0xae, 0x6a, 0xc9, 0x10, 0x58, 0x70, 0xd0, 0x60, 0x50, 0x3e, 0x70, 0x62, 0xb9, 0x18,
	0x0e, 0x9b, 0xe5, 0x30, 0x1a, 0xb6, 0x96, 0x5d, 0xaf, 0xd8, 0x7e, 0x8a, 0x8b, 0x67, 0x4c, 0x07,
	0x0c, 0x96, 0x62, 0x24, 0x76, 0xb1, 0xc0, 0x6f, 0xb9, 0x12, 0xf3, 0x88, 0x26, 0x60, 0x5a, 0xcf,
	0xae, 0x67, 0x37, 0x8b, 0xe2, 0x6f, 0x93, 0x77, 0xe2, 0xf2, 0xab, 0x73, 0x26, 0x11, 0x3b, 0x68,
	0xcb, 0x88, 0xe1, 0x07, 0x43, 0x49, 0xf5, 0xfa, 0x34, 0xab, 0xe4, 0xc8, 0xde, 0x32, 0xda, 0xd7,
	0xbb, 0x0f, 0x71, 0x7e, 0xc8, 0xc9, 0xf6, 0x8f, 0xaf, 0xbd, 0xbb, 0x7c, 0x11, 0x67, 0xff, 0x1d,
	0xe5, 0x95, 0x1a, 0x73, 0x1f, 0x85, 0xd9, 0xac, 0x26, 0x74, 0x82, 0xb6, 0x27, 0x4f, 0x0f, 0xef,
	0xbb, 0x86, 0x92, 0x37, 0x49, 0xa1, 0x07, 0xab, 0x0c, 0x5b, 0x8d, 0xde, 0xd6, 0xb7, 0x80, 0x3e,
	0x68, 0xe0, 0x58, 0xf6, 0x4d, 0x35, 0x78, 0xd2, 0xc3, 0x8f, 0x6a, 0x9e, 0x8b, 0xdf, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x79, 0x14, 0xf3, 0xc9, 0x33, 0x01, 0x00, 0x00,
}
