// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package updatemanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateControllerClient is the client API for UpdateController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateControllerClient interface {
	RegisterUM(ctx context.Context, opts ...grpc.CallOption) (UpdateController_RegisterUMClient, error)
}

type updateControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateControllerClient(cc grpc.ClientConnInterface) UpdateControllerClient {
	return &updateControllerClient{cc}
}

func (c *updateControllerClient) RegisterUM(ctx context.Context, opts ...grpc.CallOption) (UpdateController_RegisterUMClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateController_ServiceDesc.Streams[0], "/updatemanager.UpdateController/RegisterUM", opts...)
	if err != nil {
		return nil, err
	}
	x := &updateControllerRegisterUMClient{stream}
	return x, nil
}

type UpdateController_RegisterUMClient interface {
	Send(*UpdateStatus) error
	Recv() (*CMMessages, error)
	grpc.ClientStream
}

type updateControllerRegisterUMClient struct {
	grpc.ClientStream
}

func (x *updateControllerRegisterUMClient) Send(m *UpdateStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *updateControllerRegisterUMClient) Recv() (*CmMessages, error) {
	m := new(CMMessages)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateControllerServer is the server API for UpdateController service.
// All implementations must embed UnimplementedUpdateControllerServer
// for forward compatibility
type UpdateControllerServer interface {
	RegisterUM(UpdateController_RegisterUMServer) error
	mustEmbedUnimplementedUpdateControllerServer()
}

// UnimplementedUpdateControllerServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateControllerServer struct {
}

func (UnimplementedUpdateControllerServer) RegisterUM(UpdateController_RegisterUMServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterUM not implemented")
}
func (UnimplementedUpdateControllerServer) mustEmbedUnimplementedUpdateControllerServer() {}

// UnsafeUpdateControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateControllerServer will
// result in compilation errors.
type UnsafeUpdateControllerServer interface {
	mustEmbedUnimplementedUpdateControllerServer()
}

func RegisterUpdateControllerServer(s grpc.ServiceRegistrar, srv UpdateControllerServer) {
	s.RegisterService(&UpdateController_ServiceDesc, srv)
}

func _UpdateController_RegisterUM_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpdateControllerServer).RegisterUM(&updateControllerRegisterUMServer{stream})
}

type UpdateController_RegisterUMServer interface {
	Send(*CMMessages) error
	Recv() (*UpdateStatus, error)
	grpc.ServerStream
}

type updateControllerRegisterUMServer struct {
	grpc.ServerStream
}

func (x *updateControllerRegisterUMServer) Send(m *CmMessages) error {
	return x.ServerStream.SendMsg(m)
}

func (x *updateControllerRegisterUMServer) Recv() (*UpdateStatus, error) {
	m := new(UpdateStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateController_ServiceDesc is the grpc.ServiceDesc for UpdateController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "updatemanager.UpdateController",
	HandlerType: (*UpdateControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterUM",
			Handler:       _UpdateController_RegisterUM_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "updatemanager/updatemanager.proto",
}
